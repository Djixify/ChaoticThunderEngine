#ifndef ENGINE_ENUMS
#define ENGINE_ENUMS
#include <glad\glad.h>
#include <GLFW/glfw3.h>

/// <summary>
/// Vertex Shaders: Approximately once per input vertex in the vertex stream. 
///     This may be less than once per vertex if indexed rendering is used, 
///     due to the Post Transform Cache, but it will be at least once for each 
///     unique set of vertex attributes.
/// Fragment Shaders: Once per Fragment generated by the rasterizer. It may be 
///     executed more than this, as "helper" fragment shader instances may be 
///     used by the implementation. These instances however cannot write data 
///     (in any way, whether fragment shader outputs, Image Load Store or anything 
///     else). They exist mostly to compute Implicit Derivatives to make many 
///     texture sampling functions work.
/// Geometry Shaders: Once per primitive reaching this stage. Geometry shader 
///     instancing allows the GS to be invoked multiple times for each input 
///     primitive.
/// Compute Shaders: The number of invocations is defined by the number of work 
///     groups requested by the dispatch operation multiplied by the compute 
///     shader's local size. Compute shader invocations within a work group have 
///     some limited intercommunication functionality.
/// Tessellation Control Shaders: Precisely once per output vertex per patch. 
///     Invocations operating on the same input patch can intercommunicate 
///     though their output variables.
/// Tessellation Evaluation Shaders: Approximately once per vertex in the 
///     tessellation of the abstract patch. A unique vertex in the patch may be 
///     processed more than once. The minimum number of TES invocations is once 
///     per unique vertex in the patch; the maximum is one for each vertex for 
///     each primitive generated by a patch.
/// </summary>
enum class shader_type {
    VERTEX = GL_VERTEX_SHADER,
    FRAGMENT = GL_FRAGMENT_SHADER,
    GEOMETRY = GL_GEOMETRY_SHADER,
    COMPUTE = GL_COMPUTE_SHADER,
    TEST_CONTROL = GL_TESS_CONTROL_SHADER,
    TESS_EVALUATION = GL_TESS_EVALUATION_SHADER
};


/// <summary>
/// VERTEX_ARRAY_OBJECT: Buffer that stores pointers to the attributes, required
///     to be made before any other buffer
/// VERTEX_BUFFER_OBJECT: Buffer that stores the actual attribute data that the 
///     array object points to
/// ELEMENT_BUFFER_OBJECT: Connecting indices from the vertex buffer object to
///     form elements ex. 3 indices makes one triangle, indices may repeat 
///     multiple times, saving space
/// </summary>
enum class buffer_type {
    VERTEX_ARRAY_OBJECT,
    VERTEX_BUFFER_OBJECT,
    ELEMENT_BUFFER_OBJECT
};

/// <summary>
/// GL_STREAM_DRAW: the data is set only once and used by the GPU at most a few times.
/// GL_STATIC_DRAW: the data is set only once and used many times.
/// GL_DYNAMIC_DRAW: the data is changed a lot and used many times.
/// </summary>
enum class buffer_storage_type {
    STREAM = GL_STREAM_DRAW,
    STATIC = GL_STATIC_DRAW,
    DYNAMIC = GL_DYNAMIC_DRAW
};

enum class attribute_type {
    //Floating-point types. normalized​ must be GL_FALSE
    FLOAT16 = GL_HALF_FLOAT,
    FLOAT32 = GL_FLOAT,
    FLOAT64 = GL_DOUBLE,
    /*Integer types; these are converted to floats automatically. If normalized​ 
      is GL_TRUE, then the value will be converted to a float via integer 
      normalization (an unsigned byte value of 255 becomes 1.0f). If normalized​ 
      is GL_FALSE, it will be converted directly to a float as if by C-style 
      casting (255 becomes 255.0f, regardless of the size of the integer).*/
    INT8 = GL_BYTE,
    INT16 = GL_SHORT,
    INT32 = GL_INT,
    UINT8 = GL_UNSIGNED_BYTE,
    UINT16 = GL_UNSIGNED_SHORT,
    UINT32 = GL_UNSIGNED_INT
};

namespace Controls {
    enum class movement_direction {
        FORWARD,
        BACKWARD,
        LEFT,
        RIGHT
    };

    enum class mouse {
        MOUSE1      = GLFW_MOUSE_BUTTON_1,
        MOUSE2      = GLFW_MOUSE_BUTTON_2,
        MOUSE3      = GLFW_MOUSE_BUTTON_3,
        MOUSE4      = GLFW_MOUSE_BUTTON_4,
        MOUSE5      = GLFW_MOUSE_BUTTON_5,
        MOUSE6      = GLFW_MOUSE_BUTTON_6,
        MOUSE7      = GLFW_MOUSE_BUTTON_7,
        MOUSE8      = GLFW_MOUSE_BUTTON_8,
        LEFTMOUSE   = GLFW_MOUSE_BUTTON_LEFT,
        RIGHTMOUSE  = GLFW_MOUSE_BUTTON_RIGHT,
        MIDDLEMOUSE = GLFW_MOUSE_BUTTON_MIDDLE,
    };

    enum class key {
        SPACE = GLFW_KEY_SPACE,            
        APOSTROPHE = GLFW_KEY_APOSTROPHE,       
        COMMA = GLFW_KEY_COMMA,            
        MINUS = GLFW_KEY_MINUS,            
        PERIOD = GLFW_KEY_PERIOD,           
        SLASH = GLFW_KEY_SLASH,            
        ZERO  = GLFW_KEY_0,                
        ONE   = GLFW_KEY_1,                
        TWO   = GLFW_KEY_2,                
        THREE = GLFW_KEY_3,                
        FOUR  = GLFW_KEY_4,                
        FIVE  = GLFW_KEY_5,                
        SIX   = GLFW_KEY_6,                
        SEVEN = GLFW_KEY_7,                
        EIGHT = GLFW_KEY_8,                
        NINE  = GLFW_KEY_9,                
        SEMICOLON = GLFW_KEY_SEMICOLON,        
        EQUAL = GLFW_KEY_EQUAL,            
        A = GLFW_KEY_A,                
        B = GLFW_KEY_B,                
        C = GLFW_KEY_C,                
        D = GLFW_KEY_D,                
        E = GLFW_KEY_E,                
        F = GLFW_KEY_F,                
        G = GLFW_KEY_G,                
        H = GLFW_KEY_H,                
        I = GLFW_KEY_I,                
        J = GLFW_KEY_J,                
        K = GLFW_KEY_K,                
        L = GLFW_KEY_L,                
        M = GLFW_KEY_M,                
        N = GLFW_KEY_N,                
        O = GLFW_KEY_O,                
        P = GLFW_KEY_P,                
        Q = GLFW_KEY_Q,                
        R = GLFW_KEY_R,                
        S = GLFW_KEY_S,                
        T = GLFW_KEY_T,                
        U = GLFW_KEY_U,                
        V = GLFW_KEY_V,                
        W = GLFW_KEY_W,                
        X = GLFW_KEY_X,                
        Y = GLFW_KEY_Y,                
        Z = GLFW_KEY_Z,                
        LEFT_BRACKET = GLFW_KEY_LEFT_BRACKET,     
        BACKSLASH = GLFW_KEY_BACKSLASH,        
        RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET,    
        GRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT,     
        WORLD_1 = GLFW_KEY_WORLD_1,       
        WORLD_2 = GLFW_KEY_WORLD_2,     
        ESCAPE = GLFW_KEY_ESCAPE,           
        ENTER = GLFW_KEY_ENTER,            
        TAB = GLFW_KEY_TAB,              
        BACKSPACE = GLFW_KEY_BACKSPACE,        
        INSERT = GLFW_KEY_INSERT,           
        DELETE_BUTTON = GLFW_KEY_DELETE,           
        RIGHT = GLFW_KEY_RIGHT,            
        LEFT = GLFW_KEY_LEFT,             
        DOWN = GLFW_KEY_DOWN,             
        UP = GLFW_KEY_UP,               
        PAGE_UP = GLFW_KEY_PAGE_UP,          
        PAGE_DOWN = GLFW_KEY_PAGE_DOWN,        
        HOME = GLFW_KEY_HOME,             
        END = GLFW_KEY_END,              
        CAPS_LOCK = GLFW_KEY_CAPS_LOCK,        
        SCROLL_LOCK = GLFW_KEY_SCROLL_LOCK,      
        NUM_LOCK = GLFW_KEY_NUM_LOCK,         
        PRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,     
        PAUSE = GLFW_KEY_PAUSE,            
        F1 = GLFW_KEY_F1,               
        F2 = GLFW_KEY_F2,               
        F3 = GLFW_KEY_F3,               
        F4 = GLFW_KEY_F4,               
        F5 = GLFW_KEY_F5,               
        F6 = GLFW_KEY_F6,               
        F7 = GLFW_KEY_F7,               
        F8 = GLFW_KEY_F8,               
        F9 = GLFW_KEY_F9,               
        F10 = GLFW_KEY_F10,              
        F11 = GLFW_KEY_F11,              
        F12 = GLFW_KEY_F12,              
        F13 = GLFW_KEY_F13,              
        F14 = GLFW_KEY_F14,              
        F15 = GLFW_KEY_F15,              
        F16 = GLFW_KEY_F16,              
        F17 = GLFW_KEY_F17,              
        F18 = GLFW_KEY_F18,              
        F19 = GLFW_KEY_F19,              
        F20 = GLFW_KEY_F20,              
        F21 = GLFW_KEY_F21,              
        F22 = GLFW_KEY_F22,              
        F23 = GLFW_KEY_F23,              
        F24 = GLFW_KEY_F24,              
        F25 = GLFW_KEY_F25,              
        KP_ZERO  = GLFW_KEY_KP_0,             
        KP_ONE   = GLFW_KEY_KP_1,             
        KP_TWO   = GLFW_KEY_KP_2,             
        KP_THREE = GLFW_KEY_KP_3,             
        KP_FOUR  = GLFW_KEY_KP_4,             
        KP_FIVE  = GLFW_KEY_KP_5,             
        KP_SIX   = GLFW_KEY_KP_6,             
        KP_SEVEN = GLFW_KEY_KP_7,             
        KP_EIGHT = GLFW_KEY_KP_8,             
        KP_NINE  = GLFW_KEY_KP_9,             
        KP_DECIMAL = GLFW_KEY_KP_DECIMAL,       
        KP_DIVIDE = GLFW_KEY_KP_DIVIDE,        
        KP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,      
        KP_SUBTRACT = GLFW_KEY_KP_SUBTRACT,      
        KP_ADD = GLFW_KEY_KP_ADD,           
        KP_ENTER = GLFW_KEY_KP_ENTER,         
        KP_EQUAL = GLFW_KEY_KP_EQUAL,         
        LEFT_SHIFT = GLFW_KEY_LEFT_SHIFT,       
        LEFT_CONTROL = GLFW_KEY_LEFT_CONTROL,     
        LEFT_ALT = GLFW_KEY_LEFT_ALT,         
        LEFT_SUPER = GLFW_KEY_LEFT_SUPER,       
        RIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,     
        RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,    
        RIGHT_ALT = GLFW_KEY_RIGHT_ALT,
        RIGHT_SUPER = GLFW_KEY_RIGHT_SUPER,
        MENU = GLFW_KEY_MENU
    };

    enum class key_modifier {
        SHIFT = GLFW_MOD_SHIFT,
        CTRL = GLFW_MOD_CONTROL,
        CONTROL = GLFW_MOD_CONTROL,
        ALT = GLFW_MOD_ALT,
        SUPER = GLFW_MOD_SUPER,
        CAPS_LOCK = GLFW_MOD_CAPS_LOCK,
        NUM_LOCK = GLFW_MOD_NUM_LOCK
    };

    enum class key_interaction {
        RELEASE = GLFW_RELEASE,
        PRESS = GLFW_PRESS,
        LONG_HOLD = GLFW_REPEAT
    };

    enum class cursor_input_type {
        NORMAL = GLFW_CURSOR_NORMAL,
        HIDDEN = GLFW_CURSOR_HIDDEN,
        CENTERED = GLFW_CURSOR_DISABLED,
    };

    enum class cursor_aesthetic {
        ARROW = GLFW_ARROW_CURSOR,
        BEAM = GLFW_IBEAM_CURSOR,
        CROSSHAIR = GLFW_CROSSHAIR_CURSOR,
        HAND = GLFW_HAND_CURSOR,
        HORIZONTAL_RESIZE = GLFW_HRESIZE_CURSOR,
        VERTICAL_RESIZE = GLFW_VRESIZE_CURSOR,
        CUSTOM = 0x00036007
    };
}

///TODO: Controller enums, see line 593 of glfw3.h

int AttributeSize(attribute_type attr);

#endif